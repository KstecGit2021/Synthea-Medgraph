/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */

 import com.optum.giraffle.tasks.*
 import com.optum.giraffle.*
 import io.github.httpbuilderng.http.HttpTask // <1>

 buildscript {
     this.dependencies {
         this.classpath("com.opencsv:opencsv:3.8")
     }
 }

 plugins {
     id("com.optum.giraffle") version "1.3.5"
     id("net.saliman.properties") version "1.5.1"
     id("io.github.http-builder-ng.http-plugin") version "0.1.1"
 }

dependencies {
    gsqlRuntime("com.tigergraph.client:gsql_client:3.1.2")
}

repositories {
    mavenCentral()
    maven {
       url = uri("https://maven.pkg.github.com/tigergraph/gsql_client")
       credentials {
          username=project.findProperty("gpr.user") as String
          password=project.findProperty("gpr.key") as String
       }
    }
}

 http {
     config {
         it.request.setUri("${gHostUriType}://${gHost}:${gRestPort}")
         it.request.headers["Authorization"] = "Bearer ${tigergraph.token.get()}" // <2.1>
     }
 }

val gAdminPassword: String by project
val gAdminUserName: String by project
val gCertPath: String? by project
val gClientVersion: String? by project // <3>
val gGraphName: String by project
val gHost: String by project
val gHostUriType: String by project
val gPassword: String by project
val gRestPort: String by project
val gSecret: String? by project
val gUserName: String by project

val tokenMap: LinkedHashMap<String, String> = linkedMapOf("graphname" to gGraphName)

val schemaGroup: String = "Schema"
val loadingGroup: String = "Loading"
val queryGroup: String = "Query Tasks"

tigergraph {
    adminPassword.set(gAdminPassword)
    adminUserName.set(gAdminUserName)
    graphName.set(gGraphName)
    password.set(gPassword)
    scriptDir.set(file("scripts"))
    serverName.set(gHost)
    tokens.set(tokenMap)
    uriScheme.set(UriScheme.HTTPS)
    userName.set(gUserName)
    gClientVersion?.let {
        gsqlClientVersion.set(it)
    }
    gCertPath?.let {
        caCert.set(it)
    }
    gSecret?.let {
        authSecret.set(it)
    }
    logDir.set(file("./logs"))
}

tasks {
    wrapper {
        gradleVersion = "6.5"
    }


    register<GsqlTask>("showSchema") {
        scriptCommand = "ls"
        group = schemaGroup
        description = "Show vertices & edges for graph"
    }

    register<GsqlTask>("dropSynthea") {
        scriptPath = "schema/dropSynthea.gsql"
        useGlobal = true
        group = schemaGroup
        description = "Drop global variables"
    }

    register<GsqlTask>("createSchema") {
        scriptPath = "schema/createSchema.gsql"
        useGlobal = true
        group = schemaGroup
        description = "Create schema"
    }

    register<GsqlTask>("dropSchema") {
        scriptCommand = "drop all"
        group = schemaGroup
        description = "Drop entire schema"
    }

    register<GsqlTask>("createLoadLocations"){
        scriptPath = "loads/loadLocations.gsql"
        group = loadingGroup
        description = "Loads locations"
    }

    register<GsqlTask>("createLoadZips"){
        scriptPath = "loads/loadZips.gsql"
        group = loadingGroup
        description = "Loads locations"
    }

    register<GsqlTask>("createLoadAllergies") {
        scriptPath = "loads/loadAllergies.gsql"
        group = loadingGroup
        description = "Creates loading job for loading allergies"
    }

    register<GsqlTask>("createLoadCareplans") {
        scriptPath = "loads/loadCareplans.gsql"
        group = loadingGroup
        description = "Creates loading job for loading careplans"
    }

    register<GsqlTask>("createLoadConditions") {
        scriptPath = "loads/loadConditions.gsql"
        group = loadingGroup
        description = "Creates loading job for loading conditions"
    }

    register<GsqlTask>("createLoadDevices") {
        scriptPath = "loads/loadDevices.gsql"
        group = loadingGroup
        description = "Creates loading job for loading devices"
    }

    register<GsqlTask>("createLoadEncounters") {
        scriptPath = "loads/loadEncounters.gsql"
        group = loadingGroup
        description = "Creates loading job for loading encounters"
    }

    register<GsqlTask>("createLoadImaging") {
        scriptPath = "loads/loadImaging.gsql"
        group = loadingGroup
        description = "Creates loading job for loading imaging studies"
    }

    register<GsqlTask>("createLoadImmunizations") {
        scriptPath = "loads/loadImmunizations.gsql"
        group = loadingGroup
        description = "Creates loading job for loading immunizations"
    }

    register<GsqlTask>("createLoadMedications") {
        scriptPath = "loads/loadMedications.gsql"
        group = loadingGroup
        description = "Creates loading job for loading medications"
    }

    register<GsqlTask>("createLoadObservations") {
        scriptPath = "loads/loadObservations.gsql"
        group = loadingGroup
        description = "Creates loading job for loading observations"
    }

    register<GsqlTask>("createLoadOrganizations") {
        scriptPath = "loads/loadOrganizations.gsql"
        group = loadingGroup
        description = "Creates loading job for loading organizations"
    }

    register<GsqlTask>("createLoadPatients") {
        scriptPath = "loads/loadPatient.gsql"
        group = loadingGroup
        description = "Creates loading job for loading patients"
    }

    register<GsqlTask>("createLoadAttributes") {
        scriptPath = "loads/loadAttributes.gsql"
        group = loadingGroup
        description = "Creates loading job for loading patient attributes"
    }

    register<GsqlTask>("createLoadPayers") {
        scriptPath = "loads/loadPayers.gsql"
        group = loadingGroup
        description = "Creates loading job for loading payers"
    }

    register<GsqlTask>("createLoadProcedures") {
        scriptPath = "loads/loadProcedures.gsql"
        group = loadingGroup
        description = "Creates loading job for loading procedures"
    }

    register<GsqlTask>("createLoadProviders") {
        scriptPath = "loads/loadProviders.gsql"
        group = loadingGroup
        description = "Creates loading job for loading providers"
    }

    register<GsqlTask>("createLoadPayerTransitions") {
        scriptPath = "loads/loadPayerTransitions.gsql"
        group = loadingGroup
        description = "Creates loading job for loading payer transitions"
    }

    /* register<GsqlTask>("createLoadNotes") {
        scriptPath = "loads/loadPatientNotes.gsql"
        group = loadingGroup
        description = "Creates loading job for loading patient notes"
    } */

    register<GsqlTask>("createLoadSymptoms") {
        scriptPath = "loads/loadPatientSymptoms.gsql"
        group = loadingGroup
        description = "Creates loading job for loading patient symptoms"
    }

    register<GsqlTask>("createQueryCosinePatientDemographics") {
        scriptPath = "query/cosine_patient_demographics.gsql"
        group = queryGroup
        description = "Creates qurey to perform cosine similarity on patient demographics"
    }

    register<GsqlTask>("createQueryselect_All_Patient") {
        scriptPath = "query/select_All_Patient.gsql"
        group = queryGroup
        description = "Creates qurey to get info about patient"
    }

    register<HttpTask>("loadPatient") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadPatient",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/patients copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadLocations") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadLocations",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/demographics copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadZips") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadZips",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/zipcodes copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadAttributes") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadAttributes",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/Notes tokenized copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    /* register<HttpTask>("loadPatientNotes") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadPatientNotes",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/Notes copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    } */

    register<HttpTask>("loadPatientSymptoms") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadPatientSymptoms",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/normalizedSymptoms copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadAllergies") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadAllergies",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/allergies copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadCareplans") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadCareplans",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/careplans copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadConditions") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadConditions",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/conditions copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadDevices") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadDevices",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/devices copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadEncounters") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadEncounters",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/encounters copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadImaging") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadImaging",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/imaging_studies copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadImmunizations") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadImmunizations",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/immunizations copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadMedications") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadMedications",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/medications copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadObservations") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadObservations",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/observations copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadOrganizations") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadOrganizations",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/organizations copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadPayerTransitions") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadPayerTransitions",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/payer_transitions copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadPayers") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadPayers",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/payers copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadProcedures") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadProcedures",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/procedures copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    register<HttpTask>("loadProviders") {
        group = loadingGroup
        description = "Load data via the REST++ endpoint"
        post { httpConfig ->
            httpConfig.request.uri.setPath("/ddl/${gGraphName}")
            httpConfig.request.uri.setQuery(
                mapOf(
                    "tag" to "loadProviders",
                    "filename" to "f1",
                    "sep" to ",",
                    "eol" to "\n"
                )
            )
            httpConfig.request.setContentType("text/csv")
            val stream = File("data/providers copy.csv").inputStream()
            httpConfig.request.setBody(stream)
        }
    }

    val getToken by registering(GsqlTokenTask::class) {
        uriScheme.set(tigergraph.uriScheme.get())
        host.set(tigergraph.serverName.get())
        defaultPort.set(tigergraph.restPort.get())
    }

    register<GsqlTokenDeleteTask>("deleteToken") { }

    register<HttpTask>("getVersion") {
        description = "Get the server version from TigerGraph"
        get {
            it.request.uri.setPath("/version")
            it.response.success { fs, x ->
                println(fs )
                println(x)
                println("Success")
            }
        }
    }

    withType<HttpTask>().configureEach { // <6>
        dependsOn(getToken)
    }
}

val allCreateLoad by tasks.registering {
    group = loadingGroup
    description = "Creates all load rules -- as long as they start with \"createLoad\"."
}

allCreateLoad {
    dependsOn(provider {
        tasks.filter{ task -> task.name.startsWith("createLoad") }
    })
}

val allLoad by tasks.registering {
    group = loadingGroup
    description = "Load all data -- as long as start with \"load\"."
}

allLoad {
    dependsOn(provider{
        tasks.filter{ task -> task.name.startsWith("load")}
    })
}
